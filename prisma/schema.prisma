// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  VENDOR
  USER
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model User {
  id                     Int    @id @default(autoincrement())
  name                   String
  email                  String @unique
  password               String
  role                   Role   @default(USER)
  defaultShippingAddress Int?
  defaultBillingAddress  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Address   Address[]
  CartItems CartItems[]
  Orders    Orders[]

  @@map("users")
}

model Address {
  id      Int     @id @default(autoincrement())
  lineOne String
  lineTwo String?
  city    String
  country String
  pincode String

  userId Int
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  description String  @db.Text
  price       Decimal
  tags        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  OrderProduct OrderProduct[]
  CartItems    CartItems[]

  @@fulltext([name, description, tags])
  @@map("products")
}

model CartItems {
  id       Int @id @default(autoincrement())
  quantity Int

  userId Int
  user   User @relation(fields: [userId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}

model Orders {
  id        Int              @id @default(autoincrement())
  netAmount Decimal
  address   String
  status    OrderEventStatus @default(PENDING)

  userId Int
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products   OrderProduct[]
  orderEvent OrderEvent[]

  @@map("orders")
}

model OrderProduct {
  id       Int @id @default(autoincrement())
  quantity Int

  orderId Int
  order   Orders @relation(fields: [orderId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_product")
}

model OrderEvent {
  id     Int              @id @default(autoincrement())
  status OrderEventStatus @default(PENDING)

  orderId Int
  order   Orders @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_events")
}
